# app/beacon_replayer.py ‚Äî –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ –ë–î –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
import logging
from pathlib import Path
from datetime import datetime, time, date
import time as time_module
import zoneinfo
from typing import Iterable

from dotenv import load_dotenv
from sqlalchemy.orm import Session

from app.db import SessionLocal
from app.crud import get_beacon_coords_by_day
from app.analytics_stream import rt_processor
from app.telegram_bot import send_to_telegram
from app.tasks import main as send_task_report
from app.models import BeaconCoordinate

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
logging.basicConfig(
    format="%(asctime)s %(levelname)s: %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

IRKUTSK = zoneinfo.ZoneInfo("Asia/Irkutsk")

BASE_DIR = Path(__file__).resolve().parent
load_dotenv(dotenv_path=BASE_DIR / ".env")

_last_work_date: date | None = None
_last_run_time: datetime | None = None

# –î–∞—Ç–∞, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç—å—Å—è —Ç—Ä–µ–∫
REPLAY_DATE = date(2025, 8, 18)
# –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
REPLAY_DELAY = 0.0


def _process_coordinate(coord: BeaconCoordinate) -> None:
    global _last_work_date, _last_run_time

    dt_utc = coord.recorded_at
    dt_local = dt_utc.astimezone(IRKUTSK)

    today = dt_local.date()
    start_thresh = datetime.combine(today, time(8, 0), tzinfo=IRKUTSK)
    end_thresh = datetime.combine(today, time(21, 59), tzinfo=IRKUTSK)

    if (
        (_last_run_time is None or _last_run_time < start_thresh)
        and dt_local >= start_thresh
        and _last_work_date != today
    ):
        _last_work_date = today
        found = rt_processor._find_zone(coord)
        if found:
            send_to_telegram(
                f"üîî –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã: –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –∑–æ–Ω–µ ¬´{found[1]}¬ª"
            )
        else:
            send_to_telegram("üîî –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã: –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –ø—É—Ç–∏")
        try:
            send_task_report()
        except Exception as err:  # pragma: no cover - –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–æ–¥—É–ª—å
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞ –ø–æ –∑–∞–¥–∞—á–∞–º: %s", err, exc_info=True)

    try:
        rt_processor.process(coord)
    except Exception as err:  # pragma: no cover - –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–æ–¥—É–ª—å
        logger.error("‚ùå [RT] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: %s", err, exc_info=True)

    if (
        (_last_run_time is None or _last_run_time < end_thresh)
        and dt_local >= end_thresh
    ):
        found = rt_processor._find_zone(coord)
        if found:
            send_to_telegram(
                f"üîî –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã: –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–µ–Ω—å –≤ –∑–æ–Ω–µ ¬´{found[1]}¬ª"
            )
        else:
            send_to_telegram(
                "üîî –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã: –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–µ–Ω—å –≤ –ø—É—Ç–∏"
            )

    _last_run_time = dt_local


def replay(coords: Iterable[BeaconCoordinate], delay: float = 0.0) -> None:
    for coord in coords:
        _process_coordinate(coord)
        if delay:
            time_module.sleep(delay)


def main(day: date, delay: float = 0.0) -> None:
    db: Session = SessionLocal()
    try:
        coords = get_beacon_coords_by_day(db, day)
    finally:
        db.close()

    logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑–∞ %s", len(coords), day.isoformat())
    replay(coords, delay)


if __name__ == "__main__":
    main(REPLAY_DATE, REPLAY_DELAY)
